1. Webpack. Введение в арх-ру. Code splitting. Css Modules
1.1. Начало разработки Основы Webpack. Добавляем TypeScript Метка

npm init -y - инициализация проекта с подтверждением дефолтных настроек

npm install webpack webpack-cli --save-dev - установка webpack

создаем webpack.config.js
///////////////////////////////////////////////////////////////
// webpack.config.js
///////////////////////////////////////////////////////////////
const path = require('path')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const webpack = require('webpack')

module.exports = {
  mode: 'development',
  entry: path.resolve(__dirname, 'src', 'index.ts'),
  output: {
    filename: '[name].[contenthash].js',
    path: path.resolve(__dirname, 'build'),
    clean: true
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: path.resolve(__dirname, 'public', 'index.html')
    }),
    new webpack.ProgressPlugin()
  ],
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        use: 'ts-loader',
        exclude: /node_modules/,
      },
    ],
  },
  resolve: {
    extensions: ['.tsx', '.ts', '.js'],
  },
}
///////////////////////////////////////////////////////////////

HtmlWebpackPlugin - добавляет в сборку index.html и подключает скрипт index.js
webpack - запускает сборку	
ts-loader - позволяет загружать ts файлы
resolve: {
	extensions: ['.tsx', '.ts', '.js'], - позволяет импортировать перечислыенные файлы без написания .tsx, .ts, .js
}

///////////////////////////////////////////////////////////////
// tsconfig.json
///////////////////////////////////////////////////////////////
{
  "compilerOptions": {
    "outDir": "./dist/",
    "noImplicitAny": true,
    "module": "ESNext", 
    "target": "es5",
    "jsx": "react",
    "allowJs": true,
    "moduleResolution": "node",
    "allowSyntheticDefaultImports": true, 
    "esModuleInterop": true
  },
  "ts-node": {
    "compilerOptions": {
      "module": "CommonJS"
    }
  }
}

"allowSyntheticDefaultImports": true - позволяет делать дефолтный импорт (import path from 'path' вместо import * as path from 'path')
"esModuleInterop": true - позволяет делать стандартный js import вместо require()
///////////////////////////////////////////////////////////////

Установили npm пакеты:
"devDependencies": {
	"@types/node": "^22.13.1",
	"@types/webpack": "^5.28.5",
	"html-webpack-plugin": "^5.5.0",
	"ts-loader": "^9.5.2",
	"ts-node": "^10.9.2",
	"typescript": "^5.7.3",
	"webpack": "^5.69.1",
	"webpack-cli": "^4.9.2"
} 



1.2. Декомпозиция конфига. Опции конфигурации

Разделили webpack кофинг на функции:
- buildLoaders
- buildPlugins
- buildResolvers
- buildWebpackConfig
в buildWebpackConfig передаём BuildOptions



1.3. Webpack-dev-server. Переменные окружения (env)

Добавили переменные окружения Environment Variables

Установили и настроили webpack-dev-server

Добавили скрипты:
"start": "webpack serve --env port=3000",
"build:prod": "webpack --env mode=production",
"build:dev": "webpack --env mode=development"



1.4 Подключаем React и настраиваем css в webpack метка

Подключили библиотеки react и react-dom
Подключил sass loader



1.5 Настраиваем css modules

БЭМ - блок элемент модификатор  (минус методологии в том, что большой размер бандла)

.modal__content_open {
	opactity: 1;
}
.dropdown__content_open {
	opacity: 1;
}

Установили mini-css-extract-plugin - созадёт отельные css файлы
Настроили css модуля для генерации уникальных имён для css классов



1.6 Роутинг. Code splitting. Lazy. Suspence метка

Установили react-router-dom
Добавили роутинг
Добавили lazy loading страниц



